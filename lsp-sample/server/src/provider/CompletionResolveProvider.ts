import { CompletionItem } from 'vscode-languageserver';
import { RESOLVE_LISTENER } from '../compiler/antlr4ts_proxy';
import { RuleContext } from 'antlr4ts/RuleContext';
import { CompletionResolveListener, ContextInfo } from '../listeners/CompletionResolveListener';
import { ParseTreeWalker } from 'antlr4ts/tree/ParseTreeWalker';
import { ParseTree } from 'antlr4ts/tree/ParseTree';
import { NameContext } from '../antlr_autogenerated/P4grammarParser';

export function CompletionResolveProvider(item: CompletionItem): CompletionItem {

	let helperMap: Map<RuleContext | undefined, ContextInfo> | undefined = RESOLVE_LISTENER?.compResolvMap;

	for(let [context, info] of helperMap!) {
		if(item.label === getVariableName(info.name)) {
			item.detail = `(${info.type}) ` + getDeclarationText(context);
		}
	}

	return item;
}

export function getDeclarationText(context: RuleContext | undefined): string {

	let tokenTextListener = new CompletionResolveListener();
	let allTokenText: string[] = tokenTextListener.tokenTextList;

	let walker: ParseTreeWalker = new ParseTreeWalker();
	walker.walk(tokenTextListener, context!);

	return getFormattedString(allTokenText);
}

export function getFormattedString(list: string[]): string {

	let result: string = '';
	let exceptionChars: string[] = ['(', ')', ',', '{' , '}', ';'];

	for(let i = 0; i <= list.length-1; i++) {
		let str: string = list[i];
		if(exceptionChars.includes(str) || exceptionChars.includes(list[i+1])) {
			if(str === ',' || str === ';'){
				result += str + ' ';
			} else {
				result += str;
			}
		} else {
			result += str + ' ';
		}
	}

	return result;
}

export function getVariableName(ctx: RuleContext): string {

	let returnContext: ParseTree | undefined;

	for(let i = 0; i < ctx.childCount; i++){
		if(ctx.getChild(i) instanceof NameContext){
			returnContext = ctx.getChild(i);
			return returnContext.text;
		}
	}

	return '';
}

// export function getDocumentation(type: ContextInfo): string{

// 	let documentation: string | undefined;
// 	switch(type.type) {
// 		case 'action': {
// 			documentation = 'This is an action declaration';
// 			break;
// 		}
// 		case 'variable': {
// 			documentation = 'This is a variable declaration';
// 			break;
// 		}
// 		case 'struct': {
// 			documentation = 'This is a struct declaration';
// 			break;
// 		}
// 		case 'table': {
// 			documentation = 'this is a table declaration';
// 			break;
// 		}
// 		case 'control': {
// 			documentation = 'This is a control declaration';
// 			break;
// 		}
// 		case 'parser': {
// 			documentation = 'This is a parser declaration'
// 			break;
// 		}
// 		default:
// 			documentation = '';
// 			break;
// 	}

// 	return documentation;
// }