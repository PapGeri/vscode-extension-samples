import { P4grammarListener } from '../antlr_autogenerated/P4grammarListener';
import { VariableDeclarationContext, StartContext, NameContext, ActionDeclarationContext, StructTypeDeclarationContext, TableDeclarationContext, ControlTypeDeclarationContext, ParserTypeDeclarationContext } from '../antlr_autogenerated/P4grammarParser';
import { TerminalNode } from 'antlr4ts/tree/TerminalNode';
import { ParseTree } from 'antlr4ts/tree/ParseTree';
import { RuleContext } from 'antlr4ts/RuleContext';

enum ContextDeclarationEnum {
	VARIABLE = 'variable',
	ACTION = 'action',
	STRUCT = 'struct',
	TABLE = 'table',
	CONTROL = 'control',
	PARSER = 'parser'
}

export interface ContextInfo{
	type: ContextDeclarationEnum,
	name: string,
}

export class CompletionResolveListener implements P4grammarListener {

	private terminalTextList: Array<string>;
	private resolverMap: Map<RuleContext | undefined, ContextInfo>;

	constructor(){
		this.terminalTextList = new Array<string>();
		this.resolverMap = new Map<RuleContext | undefined, ContextInfo>();
	}

	visitTerminal(node: TerminalNode): void {
		this.terminalTextList.push(node.text);
	}

	enterStart(ctx: StartContext): void {
		this.resolverMap = new Map<RuleContext | undefined, ContextInfo>();
	}

	enterVariableDeclaration(ctx: VariableDeclarationContext): void {
		this.resolverMap.set(ctx, {type: ContextDeclarationEnum.VARIABLE, name: getVariableName(ctx)});
	}

	enterActionDeclaration(ctx: ActionDeclarationContext): void {
		this.resolverMap.set(ctx, {type: ContextDeclarationEnum.ACTION, name: getVariableName(ctx)});
	}

	enterStructTypeDeclaration(ctx: StructTypeDeclarationContext): void {
		this.resolverMap.set(ctx, {type: ContextDeclarationEnum.STRUCT, name: getVariableName(ctx)});
	}

	enterTableDeclaration(ctx: TableDeclarationContext): void {
		this.resolverMap.set(ctx, {type: ContextDeclarationEnum.STRUCT, name: getVariableName(ctx)});
	}

	enterControlTypeDeclaration(ctx: ControlTypeDeclarationContext): void {
		this.resolverMap.set(ctx, {type: ContextDeclarationEnum.CONTROL, name: getVariableName(ctx)});
	}

	enterParserTypeDeclaration(ctx: ParserTypeDeclarationContext): void {
		this.resolverMap.set(ctx, {type: ContextDeclarationEnum.PARSER, name: getVariableName(ctx)});
	}

	get tokenTextList(): Array<string> {
		return this.terminalTextList;
	}

	get compResolvMap(): Map<RuleContext | undefined, ContextInfo> {
		return this.resolverMap;
	}
}

function getVariableName(ctx: RuleContext): string {

	let returnContext: ParseTree | undefined;

	for(let i = 0; i < ctx.childCount; i++){
		if(ctx.getChild(i) instanceof NameContext){
			returnContext = ctx.getChild(i);
			return returnContext.text;
		}
	}

	return '';
}

