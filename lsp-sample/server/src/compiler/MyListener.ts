import { TerminalNode } from 'antlr4ts/tree/TerminalNode';
import { P4grammarListener } from '../antlr_autogenerated/P4grammarListener';
import { StartContext, ParserTypeDeclarationContext, NameContext } from '../antlr_autogenerated/P4grammarParser';

export class MyListener implements P4grammarListener {

	private myList: TerminalNode[] = new Array<TerminalNode>();
	private nodeTextList: string[] = new Array<string>();
	private completionList: string[] = new Array<string>();

	// constructorba inixializalni ureset
	constructor(){
		// this.myList = new Array<TerminalNode>();
		// this.nodeTextList = new Array<string>();
		// this.completionList = new Array<string>();
	}

	enterStart(ctx: StartContext): void {
		this.myList = new Array<TerminalNode>();
		this.nodeTextList = new Array<string>();
		this.completionList = new Array<string>();
	}

	enterName(ctx: NameContext): void {
		this.completionList.push(ctx.getChild(ctx.childCount-1).text);
	}

	visitTerminal(node: TerminalNode): void{
		this.myList.push(node);
		this.nodeTextList.push(node.text);
	}

	get list(): TerminalNode[]{
		return this.myList;
	}

	get textList(): string[] {
		return this.nodeTextList;
	}

	get compList(): string[] {
		return this.completionList;
	}

	// kulon lista a completionnek vagy kulon listener
	// + tesztek
}